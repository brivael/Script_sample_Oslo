# -*- coding: utf-8 -*-
"""
Created on Sun Mar 24 14:06:39 2019

@author: Brivael
"""

import numpy as np
import random as rd
import matplotlib.pyplot as plt
import scipy.stats
import pickle


# Parameters
vo    = 5000
vel   = np.linspace(-vo,vo,5000)
width = 50


# Useful functions
def spectre(L,vel=vel, width=width): # Function giving the spectrum from a list of dot
    A = np.zeros(5000) 
    for i in L: # for every dot in the list
        b = scipy.stats.norm.pdf(vel, -i[3], width) # it creates a gaussian centered on its velocity
        A += b
    return A

def absorption(L, cloud, density='NHI_21.0.dat'): # Function returning the absorbed spectrum for the non-absorbed spectrum
                                                  # as a function of the cloud 
    data = np.loadtxt(density) # upload the NHI from the file
    tau  = []
    for i in range(len(data)):
        tau.append(data[i][1])        # takes only the tau from the file
    t=lambda a: np.exp(-tau[int((10000+a)/5)]) # define the absorption coefficient as a function of the relative speed a

    B = []
    for k in range(len(vel)):
        p = L[k] * t( vel[k] - cloud[3]) # multiply the flux by the absorbing coefficient defined above
        if p>0:
            B.append(p)   
        else:
            B.append(0)
    return B

########################################################################

### Creation of a model cones+torus
    
def torus(nb_layers, nb_dot, save=True, torus_angle=15):
    rmin  = 0.1                 # Minimal distance of the dots from the center
    rmax  = 1                   # Maximal distance of the dots from the center
    angle = np.pi/180*(90-torus_angle)   # opening of the torus (=15°)
    
    
    
    vo = 5000                   # Maximal velocity of the clouds  
    v  = lambda r: vo*np.log(1+(r/rmax)*(np.exp(1)-1)) # Logarithmic velocity law 
                                                       # the speed is only radiative outward the center
    R   = np.linspace(rmin,rmax,nb_layers) # Division of torus into 149 layers
    nb0 = nb_dot                        # Number of dot clouds is the first layer
    
    
    P = []                          # List where I will save the coordinates and speed of the clouds
    volume0   = (R[1]**3-R[0]**3)   # Volume of the first layer
    densité0  = nb0/volume0         # Density in the first layer
    vitesse0  = v((R[1]+R[0])/2)    # Speed of the first layer (computed at a point in the middle of the layer)
    surface0  = R[1]**2             # Outer surface of the layer
    constante = densité0*vitesse0*surface0 # Flux of the first layer (density times speed times surface)
                                           # For each layer, I will add dots until the flux of the layer 
                                           # equalize the first layer flux
    
    
    for i in range(1,len(R)):              # For each layer strating from the first one, I compute:
        vitesse  = v((R[i]+R[i-1])/2)      # its speed
        volume   = (R[i]**3-R[i-1]**3)     # its volume
        surface  = R[i]**2                 # its outer surface
        densité  = 1/volume                # its density
        variable = densité*vitesse*surface # its flux per dot
        
        j = 0
        while j*variable < constante:   # until the flux per dot times the number of dots is not superior to the first layer flux:
            x = rd.uniform(-R[i],R[i])  # I give a random x value
            y = rd.uniform(-R[i],R[i])  # I give a random y value
            z = rd.uniform(-R[i],R[i])  # I give a random z value
            r = np.sqrt(x**2+y**2+z**2) # distance to the center
            V = v(r)                    # I compute the speed of the dot
            if r > R[i-1] and r < R[i]: # Take in count only dots with a correct distnace
                t = np.tan(angle)*abs(x)
                if y**2+z**2 > t**2:    # take in count only values in the cone
                    P.append([x,y,z,r,V,'b.']) # Save the coordinates, the distance, the speed, and the color
                    plt.figure(1)
                    plt.plot(x,y,'g+')  # plot the cone with xy axis
                    plt.figure(2)
                    plt.plot(y,z,'g+')  # plot the cone with yz axis
                    j+=1
        print('{: .2f}%'.format(i/(len(R)-1)*100))
    
    # plot of the disposition of the quasar
    plt.figure(1)
    theta = np.linspace(0, 2*np.pi, 40)
    x = np.cos(theta)*0.1
    y = np.sin(theta)*0.1
    plt.plot(x, y)
    x = np.cos(theta)
    y = np.sin(theta)
    plt.plot(x, y)
    plt.axis("equal")
    plt.grid()
    plt.figure(2)
    plt.axis("equal")
    plt.grid()
    
    if save:
        pickle.dump(P,open('strate_tore','wb'))



def cones(nb_layers, nb_dot, save=True, opening_angle=45):
    rmin = 0.1           # Minimal distance of the dots from the center
    rmax = 1             # Maximal distance of the dots from the center
    a2   = np.pi/180*opening_angle  # Opening of the cone 
    
    
    
    vo = 5000            # Maximal velocity of the clouds  
    v  = lambda r: vo*np.log(1+(r/rmax)*(np.exp(1)-1)) # Logarithmic velocity law 
                                                     # the speed is only radiative outward the center
    
    R   = np.linspace(rmin,rmax,nb_layers) # Division of the cones into 99 layers
    nb0 = nb_dot                           # Number of dot clouds is the first layer
    
    
    P = []                         # List where I will save the coordinates and speed of the clouds
    volume0  = (R[1]**3-R[0]**3)   # Volume of the first layer
    densité0 = nb0/volume0         # Density in the first layer
    DE = [1]                       # (list of the layer densities normalized)
    vitesse0 = v((R[1]+R[0])/2)    # Speed of the first layer (computed at a point in the middle of the layer)
    VI = [vitesse0/vo]             # (list of the layer velocities)
    surface0 = R[1]**2             # Outer surface of the layer
    SU = [surface0/rmax**2]        # (list of the outer surfaces)
    constante = densité0*vitesse0*surface0 # Flux of the first layer (density times speed times surface)
                                         # For each layer, I will add dots until the flux of the layer 
                                         # equalize the first layer flux
    VAR = [1]                      # (list of the flux)
    NB  = [1]                      # (list of the number of dots)
    
    
    
    for i in range(1,len(R)):            # For each layer strating from the first one, I compute:
        vitesse  = v((R[i]+R[i-1])/2)       # its speed
        volume   = (R[i]**3-R[i-1]**3)       # its volume
        surface  = R[i]**2                  # its outer surface
        densité  = 1/volume                 # its density
        variable = densité*vitesse*surface # its flux per dot
        

        j = 0
        while j*variable < constante:   # until the flux per dot times the number of dots is not superior to the first layer flux:
            x = rd.uniform(-R[i],R[i])  # I give a random x value
            y = rd.uniform(-R[i],R[i])  # I give a random y value
            z = rd.uniform(-R[i],R[i])  # I give a random z value
            r = np.sqrt(x**2+y**2+z**2) # distance to the center
            V = v(r)                    # I compute the speed of the dot
            if r > R[i-1] and r < R[i]:   # Take in count only dots with a correct distnace
                L = np.tan(a2)*abs(x)   
                if y**2+z**2 < L**2 :   # take in count only values in the cone
                    P.append([x,y,z,r,V,'r.']) # Save the coordinates, the distance, the speed, and the color
                    plt.figure(1)
                    plt.plot(x,y,'g+') # plot the cone with xy axis
                    plt.figure(2)
                    plt.plot(y,z,'g+') # plot the cone with yz axis
                    j += 1
    
        # save the different parameters           
        VI.append(vitesse/vo)
        DE.append(densité*j/densité0)
        SU.append(surface/rmax**2)
        VAR.append(variable*j/constante)
        NB.append(j/nb0)
        print('{: .2f}%'.format(i/(len(R)-1)*100))
    
    
    plt.figure(1)
    theta = np.linspace(0, 2*np.pi, 40)
    x, y = np.cos(theta)*0.1, np.sin(theta)*0.1
    plt.plot(x, y)
    x, y = np.cos(theta), np.sin(theta)
    plt.plot(x, y)
    plt.axis("equal")
    plt.grid()
    
    plt.figure(2)
    x, y = np.cos(theta)*np.sin(a2), np.sin(theta)*np.sin(a2)
    plt.plot(x, y)
    plt.axis("equal")
    plt.grid()
    
    if save:
        pickle.dump(P,open('strate_cone','wb')) # Save the useful values in a file
    
    
    # Plot of the different prameters as a function of the distance
    plt.figure(3)
    plt.plot(R,VI,R,DE,R,SU,R,VAR,R,NB,)
    plt.legend(['vitesse','densité','surface','flux','nombre'])
    plt.grid()


### Creation of the associated spectrum

# Name of the files of the torus and cones 
A='strate_cone' # cone
B='strate_tore'     # torus

def conetore(a,r,y,z,save=True,coefconti=0.4,coefnar=0.,plot_dispo=True):
    vo    = 5000     # Maximal speed
    angle = a        # List of orientation of the quasar (between 0 and 90 degrees)
    vit   = -0       # Speed of the cloud
    rayon = r        # List of the radius of the absorbing cloud
    Y     = y        # List of the y value of the cloud center
    Z     = z        # List of the z value of the cloud center
    
    
    
    coefconti = coefconti  # height of the continuum         
    coefnar   = coefnar    # height of the narrow component
    widthnar  = 250        # width  of the narrow component

    
    P = pickle.load(open(A,'rb')) # Load the cones
    Q = pickle.load(open(B,'rb')) # Load the torus
    files = [P,Q]
    
    for g in range(len(angle)):       # for every orientation 
        for h in range(len(rayon)):   # for every cloud radius
            cloud = [Y[h],Z[h],rayon[h],vit] # cloud : [y center, z center, radius, speed]     
           
            theta    = np.pi/180*angle[g]  # orientation of the quasar
            R        = [[],[]]             # List of the lists (cone/torus) of speed of the dots not covered by the cloud
            Rabs     = [[],[]]             # List of the lists (cone/torus) of speed of the dots covered by the cloud
            position = []                  # list saving the position of every dot
            
            index = 0                   # Index : 0 for the cones and 1 for the torus
            print('Rotation of the quasar')
            for f in files:                     
                for i in f:           # For every dot saved in the files                    
                    # Rotates the dots
                    x2 = i[0]*np.cos(theta)+i[1]*np.sin(theta)  
                    y2 = -i[0]*np.sin(theta)+i[1]*np.cos(theta)
                    z2 = i[2]
                    r  = i[3]
                    V  = i[4]/r*x2
                    if (y2-cloud[0])**2+(z2-cloud[1])**2<cloud[2]**2: # if the cloud is covering the dot
                        Rabs[index].append([x2,y2,z2,V,i[5]])                         # the speed is saved in Rabs
                    else:                                             # if the dot is not covered by the cloud
                        R[index].append([x2,y2,z2,V,i[5]])                            # the speed is saved in R
                    position.append([x2,y2,z2,i[5]])                  # for both cases, the coordinates are saved (i[5] is the color of the dot)
                index += 1
            print('Rotation finished')
            
            if plot_dispo:
                print('Plot of the disposition')
                # Plot of the positions of every dot
                plt.figure()
                thet = np.linspace(0, 2*np.pi, 40)
                x    = np.cos(thet)
                y    = np.sin(thet)
                plt.plot(x, y,'b')
                plt.axis("equal") 
                plt.plot(x, y)
    
                # if wanted, we can plot with respect to the depth but it takes a lot of time
                #position=sorted(position)
                for p in position:            
                    plt.plot(p[1],p[2],p[3],ms=1)       
                
                x, y = cloud[0]+np.cos(thet)*cloud[2], cloud[1]+np.sin(thet)*cloud[2]
                plt.plot(x, y,'g')
                plt.axis("equal")
                plt.title('disposition DLA' +'(angle='+str(angle[g])+'°)(r='+str(rayon[h])+'pc)')
                #plt.savefig('dispo_DLA_'+str(angle[g])+'_'+str(Y[h])+'_'+str(rayon[g])+'_'+str(coefconti)+'.png')            
            
            
            print('creation of spectrum')
            # Separate every list as a function of cone/torus and absorbed/not absorbed
            # and creates its spectrum using the 'spectre' function defined
            cone    = spectre(R[0])
            print('25%')
            tore    = spectre(R[1])
            print('50%')
            coneabs = spectre(Rabs[0])
            print('75%')
            toreabs = spectre(Rabs[1])
            print('100%')
            
            # Creates the absorbed spectrum from the normal one
            spabscone = absorption(coneabs,cloud) 
            spabstore = absorption(toreabs,cloud)
            spectrum = cone+spabscone+tore+spabstore
            
            # spectrum of the quasar if the cloud wasn't here
            CONE    = cone+coneabs
            TORE    = tore+toreabs
            SPECTRE = CONE+TORE
            
        
            # Creation of the continuum
            CONTINU = np.ones(len(vel))*coefconti # Continuum not aborbed
            continu = CONTINU
            if cloud[0]**2+cloud[1]**2 <= cloud[2]**2: # if the cloud covers the continuum
                continu = absorption(continu,cloud)          # absorbed continuum
            
            # Creation of the narrow component
            narrow = scipy.stats.norm.pdf(vel,0,widthnar)
            maxnar = max(narrow)
            narrow = narrow/maxnar * coefnar     
            
            
            # Definition of the norm of the spectrum, 
            # it takes the highesst flux value in the total spectrum with absorption
            norme = 0
            for i in spectrum:
                if i>norme: 
                    norme = i   
            
            # Save the total quasar spectrum
            # without absorption / with absorption
            if save:
                sauvegarde = [SPECTRE/norme+narrow+CONTINU,spectrum/norme+narrow+continu]
                pickle.dump(sauvegarde,open('spectre_i='+str(angle[g]),'wb'))
         
            
            # plot of every spectrum
            plt.figure()
            plt.plot(vel,CONE/norme,'r:', label='cone without abs')
            plt.plot(vel,(spabscone+cone)/norme,'r',label='cone with abs')
            plt.plot(vel,TORE/norme,'b:', label='tore without abs')
            plt.plot(vel,(spabstore+tore)/norme,'b', label='tore with abs')
            plt.plot(vel,narrow,'g', label='narrow line')
            plt.plot(vel,CONTINU,'y:',label='continuum without abs')
            plt.plot(vel,continu,'y',label='continuum with abs')
            plt.plot(vel,SPECTRE/norme+narrow+CONTINU,'k:',label='total without absorption')
            plt.plot(vel,spectrum/norme+narrow+continu,'k',label='total with absorption')
            plt.grid()
            
            
            plt.legend()
            plt.xlim(-vo,vo)
            plt.ylim(0,1+coefnar+coefconti)
            plt.title('emission alpha DLA (angle={}°)'.format(angle[g]))
            if save:
                plt.savefig("influence_of_angle_i="+str(angle[g])+'.png')
    
        print('cone : abs:',len(Rabs[0]),'non-abs:',len(R[0]))        
        print('tore : abs:',len(Rabs[1]),'non-abs:',len(R[1]))



########################################################################
       

# test of the functions
torus(100,100)
cones(100,100)
conetore([60],[0.4],[.0],[0.],save=False, coefconti=0.7, coefnar=1, plot_dispo=True)  
